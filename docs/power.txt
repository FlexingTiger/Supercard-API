=== Suspending execution to save power ===

The Supercard DSTwo receives interrupts from the Nintendo DS when it wants to:

- receive video, audio or other sorts of data; or
- send a reading for the real-time clock or the buttons; or
- notify the Supercard DSTwo that it has begun displaying a certain Main Screen or is in its vertical blanking period (see video.txt); or
- notify the Supercard DSTwo that it has consumed some audio at the head of the ring buffer (see audio.txt).

Some functions wait for these notifications to arrive so that they can send more data, or because user code wants button readings matching certain conditions (see input.txt).

In order to avoid wasting power, they wait for those notifications by suspending execution until the next interrupt. This helps even if the processor is left at its nominal frequency (see clock.txt).

Functions are provided in <ds2/pm.h> to replicate this functionality in applications.

=== Underclocking and overclocking ===

The CPU and RAM inside the Supercard DSTwo can be underclocked to save power, or overclocked to go faster.

See clock.txt for a discussion of the stability of various clock speeds.

=== Functions ===

#include <ds2/pm.h>

int DS2_LowClockSpeed(void);
int DS2_HighClockSpeed(void);

    Request the lowest safe underclock and overclock, respectively, for both the CPU and RAM. Current values can be found in the comments in include/ds2/pm.h if you need them.

int DS2_NominalClockSpeed(void);

    Requests the nominal clock speed for both the CPU and RAM, used at power-up. These are 360 MHz for the CPU and 120 MHz for the RAM.

int DS2_GetClockSpeed(uint32_t* restrict cpu_hz, uint32_t* restrict mem_hz);

    Retrieves the current clock speed of the CPU and RAM.

    To use this function, you should declare two distinct variables of type uint32_t and call it like so:

    uint32_t cpu_speed, mem_speed;
    DS2_GetClockSpeed(&cpu_speed, &mem_speed);

    Then, the variables you declared (without the & address operator) will contain the speeds in Hz.

int DS2_SetClockSpeed(uint32_t* restrict cpu_hz, uint32_t* restrict mem_hz);

    Similar to DS2_GetClockSpeed, except that the initial values of the variables used for the call matter and are used to change the clock speeds.

    For example, if you've gotten certain values to use (either from a configuration file or from asking the user), and you have them in these variables:

    uint32_t cpu_speed = ???, mem_speed = ???;
    DS2_SetClockSpeed(&cpu_speed, &mem_speed);

    The Supercard DSTwo will attempt to match your request exactly, but if it can't, it will pick the highest usable clock speeds lower than the request and place the speeds it used back into your variables:

    printf("The Supercard picked these\nspeeds (in Hz):\nCPU: %" PRIu32 "\nRAM: %" PRIu32 "\n",
        cpu_speed, mem_speed);
